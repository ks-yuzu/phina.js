Ext.data.JsonP.phina({"tagname":"class","name":"phina","autodetected":{},"files":[{"filename":"phina.js","href":"phina.html#phina"}],"members":[{"name":"VERSION","tagname":"property","owner":"phina","id":"static-property-VERSION","meta":{"static":true}},{"name":"global","tagname":"property","owner":"phina","id":"static-property-global","meta":{"readonly":true,"static":true}},{"name":"createClass","tagname":"method","owner":"phina","id":"static-method-createClass","meta":{"static":true}},{"name":"define","tagname":"method","owner":"phina","id":"static-method-define","meta":{"static":true}},{"name":"globalize","tagname":"method","owner":"phina","id":"static-method-globalize","meta":{"static":true}},{"name":"isAndroid","tagname":"method","owner":"phina","id":"static-method-isAndroid","meta":{"static":true}},{"name":"isIOS","tagname":"method","owner":"phina","id":"static-method-isIOS","meta":{"static":true}},{"name":"isIPad","tagname":"method","owner":"phina","id":"static-method-isIPad","meta":{"static":true}},{"name":"isIPhone","tagname":"method","owner":"phina","id":"static-method-isIPhone","meta":{"static":true}},{"name":"isMobile","tagname":"method","owner":"phina","id":"static-method-isMobile","meta":{"static":true}},{"name":"isNode","tagname":"method","owner":"phina","id":"static-method-isNode","meta":{"static":true}},{"name":"main","tagname":"method","owner":"phina","id":"static-method-main","meta":{"static":true}},{"name":"namespace","tagname":"method","owner":"phina","id":"static-method-namespace","meta":{"static":true}},{"name":"register","tagname":"method","owner":"phina","id":"static-method-register","meta":{"static":true}},{"name":"testUA","tagname":"method","owner":"phina","id":"static-method-testUA","meta":{"static":true}},{"name":"using","tagname":"method","owner":"phina","id":"static-method-using","meta":{"static":true}}],"alternateClassNames":[],"aliases":{},"id":"class-phina","short_doc":"phina.js namespace\n\nphina.js のネームスペースです。phina.js の提供する機能は（コア拡張以外）全てこのオブジェクトに入っています。 ...","component":false,"superclasses":[],"subclasses":[],"mixedInto":[],"mixins":[],"parentMixins":[],"requires":[],"uses":[],"html":"<div><pre class=\"hierarchy\"><h4>Files</h4><div class='dependency'><a href='source/phina.html#phina' target='_blank'>phina.js</a></div></pre><div class='doc-contents'><h1>phina.js namespace</h1>\n\n<p>phina.js のネームスペースです。phina.js の提供する機能は（コア拡張以外）全てこのオブジェクトに入っています。</p>\n\n<h2>phina.js のクラス定義について</h2>\n\n<p>phina.js では独自のクラスシステムを実装しています。\nphina.js のクラスの特徴としては new 構文を使用しないため、メソッドチェーンがしやすいことや、文字列でクラスを定義したり親クラスを指定したりできる点が挙げられます。\n文字列を使用できることで、クラスを定義する段階で親クラスが指定されていなくても、クラスを呼び出す段階で親クラスが定義されていればいいというメリットがあります。</p>\n\n<p>クラスの定義には <a href=\"#!/api/phina-static-method-createClass\" rel=\"phina-static-method-createClass\" class=\"docClass\">createClass</a>, <a href=\"#!/api/phina-static-method-define\" rel=\"phina-static-method-define\" class=\"docClass\">define</a> を使用します。詳しい使い方はそれぞれの関数の項を参照してください。</p>\n\n<h2>クラスについての補足</h2>\n\n<p>phina.js のクラスでは superClass を指定すると以下のメソッドが自動で追加されます。</p>\n\n<ul>\n<li>superInit(): 親クラスのコンストラクタを呼び出す（初期化）</li>\n<li>superMethod(): 親クラスのメソッドを呼び出す</li>\n</ul>\n\n\n<p>superInit は引数を変えることで親クラスのコンストラクタを呼ぶときの引数を変えられます。\nsuperMethod は一つ目の引数に呼び出したい親クラスのメソッド名を文字列で、二つ目以降に呼び出したいメソッドの引数を渡します。</p>\n\n<p>また phina.js のクラスでは以下の特別な役割をもったプロパティ、メソッドが存在します。</p>\n\n<ul>\n<li>_accessor: アクセッサー（ゲッターとセッター）を定義するためのプロパティ</li>\n<li>_static: static メンバを定義するためのプロパティ</li>\n<li>_defined(): クラスが定義されたときに呼ばれるメソッド</li>\n</ul>\n\n\n<h3>_accessor の使用例</h3>\n\n<pre><code>var Class = <a href=\"#!/api/phina-static-method-createClass\" rel=\"phina-static-method-createClass\" class=\"docClass\">phina.createClass</a>({\n  init: function() {\n    ...\n  },\n\n  _accessor: function() {\n    value: {\n      get: function() {\n        return this._value;\n      },\n\n      set: function(v) {\n        this._value = v;\n        console.log('valueがセットされました！');\n      }\n    }\n  }\n});\n</code></pre>\n\n<h3>_static の使用例</h3>\n\n<pre><code>var Class = <a href=\"#!/api/phina-static-method-createClass\" rel=\"phina-static-method-createClass\" class=\"docClass\">phina.createClass</a>({\n  init: function() {\n    ...\n  },\n\n  _static: {\n\n    staticProperty1: 1,\n    staticProperty2: 2,\n\n    staticMethod1: function(){},\n    staticMethod2: function(){}\n\n  }\n});\n\nconsole.log(Class.staticProperty1); // =&gt; 1\n</code></pre>\n\n<h3>_defined の使用例</h3>\n\n<pre><code>var Class = <a href=\"#!/api/phina-static-method-createClass\" rel=\"phina-static-method-createClass\" class=\"docClass\">phina.createClass</a>({\n  init: function() {\n  },\n\n  _defined: function() {\n    console.log('defined!');\n  }\n}); // =&gt; defined!\n</code></pre>\n</div><div class='members'><div class='members-section'><h3 class='members-title icon-property'>Properties</h3><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Static properties</h3><div id='static-property-VERSION' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='phina'>phina</span><br/><a href='source/phina.html#phina-static-property-VERSION' target='_blank' class='view-source'>view source</a></div><a href='#!/api/phina-static-property-VERSION' class='name expandable'>VERSION</a> : String<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>phina.js のバージョンです。 ...</div><div class='long'><p>phina.js のバージョンです。</p>\n<p>Defaults to: <code>&lt;%= version %&gt;</code></p></div></div></div><div id='static-property-global' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='phina'>phina</span><br/><a href='source/phina.html#phina-static-property-global' target='_blank' class='view-source'>view source</a></div><a href='#!/api/phina-static-property-global' class='name expandable'>global</a> : Object<span class=\"signature\"><span class='readonly' >readonly</span><span class='static' >static</span></span></div><div class='description'><div class='short'>Node.js なら global ブラウザなら window を返します。 ...</div><div class='long'><p>Node.js なら global ブラウザなら window を返します。\nゲッターのみ定義されています。</p>\n</div></div></div></div></div><div class='members-section'><h3 class='members-title icon-method'>Methods</h3><div class='subsection'><div class='definedBy'>Defined By</div><h4 class='members-subtitle'>Static methods</h3><div id='static-method-createClass' class='member first-child not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='phina'>phina</span><br/><a href='source/phina.html#phina-static-method-createClass' target='_blank' class='view-source'>view source</a></div><a href='#!/api/phina-static-method-createClass' class='name expandable'>createClass</a>( <span class='pre'></span> ) : Function<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>クラスを作成する関数です。 ...</div><div class='long'><p>クラスを作成する関数です。\n親クラスの指定は文字列でも可能です。\n何も継承しない場合 superClass の指定は不要です。また、親クラスを継承している場合、コンストラクタ内で this.superInit() を実行して親クラスを初期化することが必須です。</p>\n\n<h3>Example</h3>\n\n<pre><code>var Class = <a href=\"#!/api/phina-static-method-createClass\" rel=\"phina-static-method-createClass\" class=\"docClass\">phina.createClass</a>({\n</code></pre>\n\n<p>　　  superClass: 'namespace.Super',//親クラス継承</p>\n\n<p>　　  //メンバ変数\n　　  member1: 100,\n　　  member2: 'test',\n　　  member3: null,</p>\n\n<p>　　  //コンストラクタ\n　　  //Class()を呼び出したとき実行される\n　　  init: function(a, b){\n　　    //スーパークラス(継承したクラス)のinit\n　　    this.superInit(a, b);\n　　    this.a = a;\n　　    this.b = b;\n　　  },\n　　\n　　  //メソッド\n　　  method1: function(){},\n　　  method2: function(){},\n　　\n　　});</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : Object<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Function</span><div class='sub-desc'><p>クラス</p>\n</div></li></ul></div></div></div><div id='static-method-define' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='phina'>phina</span><br/><a href='source/phina.html#phina-static-method-define' target='_blank' class='view-source'>view source</a></div><a href='#!/api/phina-static-method-define' class='name expandable'>define</a>( <span class='pre'>path, params</span> ) : Function<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>クラスを定義する関数です。使い方は createClass とほとんど同じです。 ...</div><div class='long'><p>クラスを定義する関数です。使い方は <a href=\"#!/api/phina-static-method-createClass\" rel=\"phina-static-method-createClass\" class=\"docClass\">createClass</a> とほとんど同じです。\nただし、引数は2つあり、第一引数は定義するクラスのパスを文字列で渡します。第二引数のオブジェクトは <a href=\"#!/api/phina-static-method-createClass\" rel=\"phina-static-method-createClass\" class=\"docClass\">createClass</a> の引数と同じようにします。\n<a href=\"#!/api/phina-static-method-createClass\" rel=\"phina-static-method-createClass\" class=\"docClass\">createClass</a> と違い、変数に代入する必用がなく、パス指定でクラスを定義できます。\n内部的には <a href=\"#!/api/phina-static-method-register\" rel=\"phina-static-method-register\" class=\"docClass\">register</a>, <a href=\"#!/api/phina-static-method-using\" rel=\"phina-static-method-using\" class=\"docClass\">using</a> を使用しているため、パスは , . / \\ :: で区切ることができます。</p>\n\n<h3>Example</h3>\n\n<pre><code><a href=\"#!/api/phina-static-method-define\" rel=\"phina-static-method-define\" class=\"docClass\">phina.define</a>('namespace.Class', {\n  superClass: 'namespace.Super',//親クラス継承\n\n  //メンバ変数\n  member1: 100,\n  member2: 'test',\n  member3: null,  \n\n\n  //コンストラクタ\n  //Class()を呼び出したとき実行される\n  init: function(a, b){\n    //スーパークラス(継承したクラス)のinit\n    this.superInit(a, b);\n    this.a = a;\n    this.b = b;\n  },\n\n  //メソッド\n  method1: function(){},\n  method2: function(){},\n\n});\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : String<div class='sub-desc'><p>パス</p>\n</div></li><li><span class='pre'>params</span> : Object<div class='sub-desc'><p>オブジェクト</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Function</span><div class='sub-desc'><p>定義したクラス</p>\n</div></li></ul></div></div></div><div id='static-method-globalize' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='phina'>phina</span><br/><a href='source/phina.html#phina-static-method-globalize' target='_blank' class='view-source'>view source</a></div><a href='#!/api/phina-static-method-globalize' class='name expandable'>globalize</a>( <span class='pre'></span> )<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>phina.js が用意している全てのクラスをグローバルに展開します。（具体的には phina が持つオブジェクトが一通りグローバルに展開されます。）\nこの関数を実行することで、いちいち global からたどっていかなくても phi...</div><div class='long'><p>phina.js が用意している全てのクラスをグローバルに展開します。（具体的には phina が持つオブジェクトが一通りグローバルに展開されます。）\nこの関数を実行することで、いちいち global からたどっていかなくても phina.js の用意しているクラスをクラス名だけで呼び出すことができます。</p>\n\n<h3>Example</h3>\n\n<pre><code><a href=\"#!/api/phina-static-method-globalize\" rel=\"phina-static-method-globalize\" class=\"docClass\">phina.globalize</a>();\n</code></pre>\n</div></div></div><div id='static-method-isAndroid' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='phina'>phina</span><br/><a href='source/phina.html#phina-static-method-isAndroid' target='_blank' class='view-source'>view source</a></div><a href='#!/api/phina-static-method-isAndroid' class='name expandable'>isAndroid</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>Android かどうかを返します。 ...</div><div class='long'><p>Android かどうかを返します。</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>Android かどうか</p>\n</div></li></ul></div></div></div><div id='static-method-isIOS' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='phina'>phina</span><br/><a href='source/phina.html#phina-static-method-isIOS' target='_blank' class='view-source'>view source</a></div><a href='#!/api/phina-static-method-isIOS' class='name expandable'>isIOS</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>iOS かどうかを返します。 ...</div><div class='long'><p>iOS かどうかを返します。</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>iOS かどうか</p>\n</div></li></ul></div></div></div><div id='static-method-isIPad' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='phina'>phina</span><br/><a href='source/phina.html#phina-static-method-isIPad' target='_blank' class='view-source'>view source</a></div><a href='#!/api/phina-static-method-isIPad' class='name expandable'>isIPad</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>iPad かどうかを返します。 ...</div><div class='long'><p>iPad かどうかを返します。</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>iPad かどうか</p>\n</div></li></ul></div></div></div><div id='static-method-isIPhone' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='phina'>phina</span><br/><a href='source/phina.html#phina-static-method-isIPhone' target='_blank' class='view-source'>view source</a></div><a href='#!/api/phina-static-method-isIPhone' class='name expandable'>isIPhone</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>iPhone かどうかを返します。 ...</div><div class='long'><p>iPhone かどうかを返します。</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>iPhone かどうか</p>\n</div></li></ul></div></div></div><div id='static-method-isMobile' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='phina'>phina</span><br/><a href='source/phina.html#phina-static-method-isMobile' target='_blank' class='view-source'>view source</a></div><a href='#!/api/phina-static-method-isMobile' class='name expandable'>isMobile</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>モバイルかどうかを返します。具体的には Android, iPhone, iPad のいずれかだと true になります。 ...</div><div class='long'><p>モバイルかどうかを返します。具体的には Android, iPhone, iPad のいずれかだと true になります。</p>\n<h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'><p>モバイルかどうか</p>\n</div></li></ul></div></div></div><div id='static-method-isNode' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='phina'>phina</span><br/><a href='source/phina.html#phina-static-method-isNode' target='_blank' class='view-source'>view source</a></div><a href='#!/api/phina-static-method-isNode' class='name expandable'>isNode</a>( <span class='pre'></span> )<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>Node.js の module かどうかをチェックします。 ...</div><div class='long'><p>Node.js の module かどうかをチェックします。</p>\n</div></div></div><div id='static-method-main' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='phina'>phina</span><br/><a href='source/phina.html#phina-static-method-main' target='_blank' class='view-source'>view source</a></div><a href='#!/api/phina-static-method-main' class='name expandable'>main</a>( <span class='pre'>func</span> )<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>phina.js でプログラミングする際、メインの処理を記述するための関数です。基本的に phina.js でのプログラミングではこの中にプログラムを書いていくことになります。 ...</div><div class='long'><p>phina.js でプログラミングする際、メインの処理を記述するための関数です。基本的に phina.js でのプログラミングではこの中にプログラムを書いていくことになります。</p>\n\n<h3>Example</h3>\n\n<pre><code><a href=\"#!/api/phina-static-method-main\" rel=\"phina-static-method-main\" class=\"docClass\">phina.main</a>(function() {\n  //ここにメインの処理を書く\n});\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>func</span> : Function<div class='sub-desc'><p>メインの処理</p>\n</div></li></ul></div></div></div><div id='static-method-namespace' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='phina'>phina</span><br/><a href='source/phina.html#phina-static-method-namespace' target='_blank' class='view-source'>view source</a></div><a href='#!/api/phina-static-method-namespace' class='name expandable'>namespace</a>( <span class='pre'>fn</span> )<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>引数は関数で、その関数内での this は phina になります。 ...</div><div class='long'><p>引数は関数で、その関数内での this は phina になります。</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>fn</span> : Function<div class='sub-desc'><p>関数</p>\n</div></li></ul></div></div></div><div id='static-method-register' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='phina'>phina</span><br/><a href='source/phina.html#phina-static-method-register' target='_blank' class='view-source'>view source</a></div><a href='#!/api/phina-static-method-register' class='name expandable'>register</a>( <span class='pre'>path, _class</span> ) : Object<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>パス指定でオブジェクトを登録する関数です。パスは , . ...</div><div class='long'><p>パス指定でオブジェクトを登録する関数です。パスは , . / \\ :: で区切ることができます。</p>\n\n<h3>Example</h3>\n\n<pre><code><a href=\"#!/api/phina-static-method-register\" rel=\"phina-static-method-register\" class=\"docClass\">phina.register</a>('hoge.foo.bar', {\n  num: 100,\n});\nconsole.log(hoge.foo.bar.num); // =&gt; 100\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : String<div class='sub-desc'><p>登録するオブジェクトのパス</p>\n</div></li><li><span class='pre'>_class</span> : Object<div class='sub-desc'><p>登録するオブジェクト</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>登録したオブジェクト</p>\n</div></li></ul></div></div></div><div id='static-method-testUA' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='phina'>phina</span><br/><a href='source/phina.html#phina-static-method-testUA' target='_blank' class='view-source'>view source</a></div><a href='#!/api/phina-static-method-testUA' class='name expandable'>testUA</a>( <span class='pre'></span> ) : Boolean<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>引数の RegExp オブジェクトとユーザーエージェントを比較して返します。 ...</div><div class='long'><p>引数の RegExp オブジェクトとユーザーエージェントを比較して返します。</p>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'></span> : RegExp<div class='sub-desc'>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Boolean</span><div class='sub-desc'>\n</div></li></ul></div></div></div><div id='static-method-using' class='member  not-inherited'><a href='#' class='side expandable'><span>&nbsp;</span></a><div class='title'><div class='meta'><span class='defined-in' rel='phina'>phina</span><br/><a href='source/phina.html#phina-static-method-using' target='_blank' class='view-source'>view source</a></div><a href='#!/api/phina-static-method-using' class='name expandable'>using</a>( <span class='pre'>path</span> ) : Object<span class=\"signature\"><span class='static' >static</span></span></div><div class='description'><div class='short'>文字列で定義したパスを使ってオブジェクトを取り出します。パスは , . ...</div><div class='long'><p>文字列で定義したパスを使ってオブジェクトを取り出します。パスは , . / \\ :: で区切ることができます。\nphina.register で登録したオブジェクトを取り出すときなどに使うと便利な関数です。</p>\n\n<h3>Example</h3>\n\n<pre><code>hoge = {\n  foo: {\n    bar: {\n      num: 100\n    }\n  }\n};\nvar bar = <a href=\"#!/api/phina-static-method-using\" rel=\"phina-static-method-using\" class=\"docClass\">phina.using</a>('hoge.foo.bar');\nconsole.log(bar.num); // =&gt; 100\n</code></pre>\n<h3 class=\"pa\">Parameters</h3><ul><li><span class='pre'>path</span> : String<div class='sub-desc'><p>オブジェクトへのパス</p>\n</div></li></ul><h3 class='pa'>Returns</h3><ul><li><span class='pre'>Object</span><div class='sub-desc'><p>取り出したオブジェクト</p>\n</div></li></ul></div></div></div></div></div></div></div>","meta":{}});